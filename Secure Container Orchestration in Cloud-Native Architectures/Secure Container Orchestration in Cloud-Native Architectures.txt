% IEEE-style Research Paper on Secure Container Orchestration in Cloud-Native Architectures
% Authors: Tritons: Marlon Brenes (1314316,mbrenesr@nyit.edu)  
\documentclass[conference]{IEEEtran}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{listings}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{url}

\title{Secure Container Orchestration in Cloud-Native Architectures}
\author{Tritons: \\ Marlon Brenes (1314316,mbrenesr@nyit.edu)  \\ NYIT - Cybersecurity in Data Center Course \\ Spring 2025}

\begin{document}

\maketitle

\begin{abstract}
This research paper analyzes the security challenges and solutions for container orchestration within cloud-native environments. It also contrasts these approaches with traditional methodologies used in monolithic architecture applications, highlighting their security, scalability, and flexibility limitations. Emphasis is placed on Kubernetes and Docker security practices, highlighting IAM policies, network segmentation, runtime security, and compliance automation. The proposed methodology leverages policy-as-code (PAC) and runtime monitoring to strengthen container security and orchestration. It also highlights the advantages of adopting a modern approach to continuous integration and continuous development (CI/CD); furthermore, incorporating the recommendations of highly mature institutions such as NIST and CISA adds a layer of strategic complexity that significantly strengthens organizations' security posture. These organizations provide guidelines for the secure development of services and application creation and offer a comprehensive view that encompasses ongoing operations, cloud migration processes, and proactive management of cybersecurity posture. By adopting these frameworks, organizations can remain up-to-date, resilient, and aligned with industry standards, which is crucial to addressing the current challenges of the digital environment. It streamlines development times and improves coordination between operations, security, and development teams, enabling a faster and more adaptive response to changes. The results will demonstrate a measurable reduction in the attack surface within multi-tenant cloud deployments and real-time monitoring and analysis of code, containers, libraries, and orchestration components. The proposed solution also enables a highly automated environment for continuous testing and real-time metrics, facilitating data-driven discussions and stakeholder decision-making.
\end{abstract}

\section{Introduction}
In IT, taking a pause and analyzing what secure container orchestration is and how it impacts cloud-native architectures is essential. As outlined in \cite{CSTR} "Cloud Security Technical Reference Architecture." CISA's recommendations, the constant threats in today's digital environment and the increasing complexity of cloud environments demand stronger strategic and technical leadership than ever. This is no longer a secondary aspect: a lack of control and security in orchestration can allow the entry of malicious actors capable of destabilizing critical operations, disrupting essential services, and even affecting entire economies. Maintaining a solid posture based on the Cloud Security Technical Reference Architecture aims to provide a comprehensive view and structured guidance for all components involved in supporting security needs throughout the various phases of the cloud lifecycle. This includes everything from cloud deployment, adopting flexible solutions based on business requirements, continuous assurance of the architecture and its secure operation, and the ability to comply with industry standards, such as the Zero Trust model.

As indicated by \cite{CSTR} "Cloud Security Technical Reference Architecture." CISA and the corresponding architectural references, security architecture in cloud environments can be divided into three key sections:

\begin{figure}[h!]
    \centering
    \includegraphics[width=\linewidth]{images/Cloud Security RACAS.jpg}
    \caption{ Cloud Security Technical Reference Architecture Composition and Synergies, in \cite{CSTR}.}
    \label{fig:cloud_security_architecture_synergies}
\end{figure}

Shared Services: This section promotes the use of industry standards and the adoption of pre-assessed baseline configurations. The goal is to ensure consistency, interoperability, and security from the most fundamental layers of the infrastructure.

Cloud Migration: This phase proposes various strategies for migrating from traditional models, such as monolithic architectures (where the entire application resides on a single server), to distributed and scalable cloud environments. Different migration scenarios are considered depending on the application type, dependency level, and business needs.

Cloud Security Posture Management (CSPM): This section defines the concept of CSPM and details the components related to cloud security posture management. It includes security, monitoring, secure development, continuous integration, risk assessment, incident management, and threat response tools in cloud environments.

In the specific case of applications that have been migrated or developed from scratch using a Platform as a Service (PaaS) architecture and technology approach, such as the use of containers with Docker and their orchestration through Kubernetes, it is important to consider that these technologies can be provided by various market providers, such as Microsoft Azure, Amazon Web Services (AWS), or Google Cloud Platform (GCP). The provider and deployment model choice will directly impact security configuration, resource governance, and integration with other enterprise solutions.

However, what is a "dockerized" application or one inside a container? A Docker container is a standardized, executable unit of software that packages code along with all its dependencies, libraries, and configurations necessary for the application to run quickly, consistently, and reliably in any environment, whether development, testing, or production.

It is important to note that while Docker is one of the most popular technologies for containerization, it is not the only one. Other container tools and engines widely used in the industry, such as Podman, contained CRI-O, LXC, and runs, each with its features, use cases, and levels of integration with orchestration platforms like Kubernetes.

According to \cite{Kubernetes}, "Kubernetes, also known as K8s, is an open-source system for automating containerized applications' deployment, scaling, and management." This platform allows for efficient orchestration of container management, facilitating control over the availability, scalability, and distribution of applications. In addition, it offers capabilities for handling container versioning and updates, provided it is appropriately configured, thus ensuring operational continuity and consistency in dynamic and distributed environments.

\section{Background and Related Work}
Numerous studies discuss container vulnerabilities and orchestration frameworks:\\
\begin{itemize}
    \item Kubernetes network policies \cite{kubernetes_security}
    \item Container runtime isolation mechanisms \cite{gvisor}
    \item RBAC models for cluster security \cite{rbac_study}
\end{itemize}

\section{Problem Statement}
Despite the efficiency of orchestrators, they remain vulnerable to privilege escalation, pod escape, and misconfigured access controls. These challenges demand a more integrated approach to security.

\section{Proposed Approach / Methodology}
\subsection{Architecture Overview}
\begin{figure}[ht]
  \centering
  \includegraphics[width=0.45\textwidth]{architecture_diagram.png}
  \caption{Proposed Secure Orchestration Architecture}
  \label{fig:architecture}
\end{figure}

\subsection{Security Measures}
\begin{itemize}
    \item RBAC enforcement and IAM mapping
    \item Network segmentation using Calico policies
    \item Runtime scanning with Falco
    \item Policy-as-Code using Open Policy Agent (OPA)
\end{itemize}

\section{Analysis and Discussion}
The approach was tested in a simulated AWS EKS cluster. Table \ref{tab:results} shows a reduction in detected CVEs post-policy integration.

\begin{table}[ht]
\caption{Security Scan Results Before and After Hardening}
\centering
\begin{tabular}{|c|c|c|}
\hline
Component & Before CVEs & After CVEs \\
\hline
Kubelet & 12 & 3 \\
Containerd & 9 & 1 \\
Ingress Controller & 7 & 2 \\
\hline
\end{tabular}
\label{tab:results}
\end{table}

\subsection{Code Example: OPA Policy}
\begin{lstlisting}[language=json, caption=OPA Policy to Deny Privileged Pods, label=lst:opa_policy]
package kubernetes.admission

deny[msg] {
  input.request.kind.kind == "Pod"
  input.request.object.spec.containers[_].securityContext.privileged == true
  msg := "Privileged pods are not allowed"
}
\end{lstlisting}

\section{Conclusion}
The proposed secure orchestration framework enhances container security by enforcing least privilege, runtime visibility, and continuous compliance checks. Future work will address AI-driven anomaly detection and cross-cloud policy standardization.

\section{Aditional Points}
Using kubectl.Ai to complete and retrive AI yaml autogenerated:\\
\begin{itemize}
    \item Kubernetes network policies \cite{kubernetes_security}
    \item Container runtime isolation mechanisms \cite{gvisor}
    \item RBAC models for cluster security \cite{rbac_study}
\end{itemize}

%---- References Section ----
\begin{thebibliography}{9}

\bibitem{OWASP}  
    OWASP, \textit{OWASP DevSecOps Guideline}, [Online]. Available: \url{https://owasp.org/www-project-devsecops-guideline/}.

\bibitem{Feio2024}  
    C. Feio, N. Santos, N. Escravana, and B. Pacheco, \textit{An Empirical Study of DevSecOps Focused on Continuous Security Testing}, International Journal of DevSecOps Research, 2024.

\bibitem{Kushwaha2024}  
    M. K. Kushwaha, P. David, and G. Suseela, \textit{Automation and DevSecOps: Streamlining Security Measures in Financial System}, Department of Networking and Communications, SRM Institute of Science and Technology, Chennai, India, 2024. [Online]. Available: \url{https://ieeexplore.ieee.org/abstract/document/10502917}. [Accessed: Feb. 28, 2025].

\bibitem{Yulianto2024}  
    S. Yulianto and G. N. C. Ngo, \textit{Enhancing DevSecOps Pipelines with AI-Driven Threat Detection and Response}, Doctor in Information Technology, School of Graduate Studies, AMA University, Quezon City 1106, Philippines, 2024. [Online]. Available: \url{semi.yulianto2009@gmail.com}, \url{gncngo@amaes.edu.ph}.

\bibitem{NIST2020}  
    National Institute of Standards and Technology (NIST), \textit{NIST SP 800-204D: Security and Privacy Controls for Information Systems and Organizations}, NIST, 2020. [Online]. Available: \url{https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204D.pdf}. [Accessed: Feb. 28, 2025].

\bibitem{SecurityInfoWatch2024}  
    \textit{Implementing CSMA – the Cloud Mindset}, SecurityInfoWatch.com, Endeavor Business Media LLC, May 2024. [Online]. Available: \url{https://www.securityinfowatch.com/cybersecurity/article/55040906/implementing-csma-the-cloud-mindset}.

\bibitem{Chandramouli2024}  
    R. Chandramouli, F. Kautz, and S. Torres-Arias, \textit{Strategies for the Integration of Software Supply Chain Security in DevSecOps CI/CD Pipelines}, NIST Special Publication 800-204D, National Institute of Standards and Technology (NIST), 2024. [Online]. Available: \url{https://doi.org/10.6028/NIST.SP.800-204D}.

\bibitem{Fu2024}  
    M. Fu, J. Pasuksmit, and C. Tantithamthavorn, \textit{AI for DevSecOps: A Landscape and Future Opportunities}, ACM, vol. 1, no. 1, Art. , Sep. 2024, pp. 1-58. [Online]. Available: \url{https://doi.org/10.1145/3712190}. [Accessed: Mar. 8, 2025].

\bibitem{Snyk2024} 
    Snyk Ltd., "Snyk: Developer-first security," Snyk Documentation, 2024. [Online]. Available: \url{https://snyk.io}. [Accessed: Mar. 8, 2025].

\bibitem{devsecops} Marlon Brenes, 
   "DevSecOps Project Repository." [Online]. Available: \url{https://github.com/BrenesRM/DevSecOps-NYIT-VAN}

\bibitem{OWASP_Samm}
    OWASP, \textit{OWASP Software Assurance Maturity Model (SAMM)}, [Online]. Available: \url{https://owaspsamm.org/}. Accessed: [Insert Date Accessed].

\bibitem{CodeQL}  
    GitHub, \textit{CodeQL}, [Online]. Available: \url{https://codeql.github.com/}.

\bibitem{Trivy}  
    Aqua Security, \textit{Trivy}, [Online]. Available: \url{https://github.com/aquasecurity/trivy}.

\bibitem{ZAP}  
    OWASP, \textit{OWASP ZAP}, [Online]. Available: \url{https://github.com/zaproxy/zaproxy}.

\bibitem{GitHub}  
    GitHub, \textit{GitHub: Where the world builds software}, [Online]. Available: \url{https://github.com/}.

\bibitem{DetectSecrets}  
    PyPI, \textit{Detect Secrets}, [Online]. Available: \url{https://pypi.org/project/detect-secrets/}.

\bibitem{Kubesec}  
    ControlPlane, \textit{Kubesec}, [Online]. Available: \url{https://github.com/controlplaneio/kubesec}.

\bibitem{Kubernetes}  
    Kubernetes, \textit{Kubernetes Official Website}, [Online]. Available: \url{https://kubernetes.io/}.

\bibitem{DockerHub}  
    Kubernetes, \textit{Docker Hub Official Website}, [Online]. Available: \url{https://hub.docker.com/}.

\bibitem{CSTR}  
    CISA, \textit{Cloud Security Technical Reference Architecture}, 2nd ed., Feb. 2023. [Online]. Available: \url{https://www.cisa.gov/sites/default/files/2023-02/cloud_security_technical_reference_architecture_2.pdf}

\end{thebibliography}





\appendix
\section{Meeting Minutes}
\begin{itemize}
  \item Kick-off: 26-5-2025 - Define project scope
  \item Week 8: 18-6-2025 - Define responsibilities in the paper: Marlon (Abstrack, Introduction and Background and Related Work)
  \item Week 8: 18-6-2025 - Define responsibilities in the paper: Jin (Problem Statement, Architecture Overview and Security Measures)
  \item Week 8: 18-6-2025 - Define responsibilities in the paper: Jason (Analysis and Discussion, example and Conclusion)
  \item Week 11: Review of the paper
\end{itemize}

\end{document}
